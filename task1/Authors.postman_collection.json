{
	"info": {
		"_postman_id": "d32caa4e-2be5-40d2-b938-dfe5cfb16621",
		"name": "Authors",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "getAuthors",
			"item": [
				{
					"name": "getAuthors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Statues code should equal 200\",function(){\r",
									"    pm.expect(pm.response.code).to.equal(200)\r",
									"})\r",
									"var objectNum = pm.response.json().length\r",
									"//console.log(objectNum)\r",
									"var randNum = Math.floor(Math.random() * objectNum);\r",
									"pm.collectionVariables.set(\"authorsbookid\", pm.response.json()[randNum].id);\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.text()).to.contains(\"id\");\r",
									"});\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.text()).to.contains(\"idBook\");\r",
									"});\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.text()).to.contains(\"firstName\");\r",
									"});\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.text()).to.contains(\"lastName\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/api/v1/Authors",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"Authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "authors by bookId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"for(var i=0;i<pm.response.json.length;i++)\r",
									"{\r",
									"\r",
									"    pm.expect(pm.response.json()[i].idBook).to.eql(1);\r",
									"}\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BaseURL}}/api/v1/Authors/authors/books/1",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"Authors",
								"authors",
								"books",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Statues code should equal 201\",function(){\r",
									"    pm.expect(pm.response.code).to.equal(201)\r",
									"})\r",
									"pm.test(\"Statues code should equal 400\",function(){\r",
									"    pm.expect(pm.response.code).to.equal(400)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"idBook\": 0,\r\n  \"firstName\": \"ayat\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/api/v1/Authors",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"Authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "update author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\":0,\r\n  \"idBook\": 0,\r\n  \"firstName\": \"ayat\",\r\n  \"lastName\": \"hany\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/api/v1/Authors/1",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"Authors",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.json.firstName).to.eql(\"ayat\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/api/v1/Authors/1",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"Authors",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "authorsbookid",
			"value": ""
		},
		{
			"key": "authorid",
			"value": ""
		},
		{
			"key": "authorsid",
			"value": ""
		}
	]
}